// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230213154034_CompletedEntities230213")]
    partial class CompletedEntities230213
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("API.Entity.AircraftType", b =>
                {
                    b.Property<int>("AircraftTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("hasUnitLoadOption")
                        .HasColumnType("INTEGER");

                    b.HasKey("AircraftTypeId");

                    b.ToTable("AircraftTypes");
                });

            modelBuilder.Entity("API.Entity.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AircraftTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FlightNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FlightId");

                    b.HasIndex("AircraftTypeId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("API.Entity.GroundVehicle", b =>
                {
                    b.Property<int>("GroundVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsIdling")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroundVehicleId");

                    b.HasIndex("PositionId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("GroundVehicles");
                });

            modelBuilder.Entity("API.Entity.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndOfService")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QtyFuel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartOfService")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderId");

                    b.HasIndex("FlightId");

                    b.HasIndex("PositionId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("API.Entity.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("API.Entity.VehicleSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroundVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScheduleId");

                    b.HasIndex("GroundVehicleId");

                    b.HasIndex("OrderId");

                    b.ToTable("VehicleSchedules");
                });

            modelBuilder.Entity("API.Entity.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("API.Entity.Flight", b =>
                {
                    b.HasOne("API.Entity.AircraftType", "AircraftType")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AircraftType");
                });

            modelBuilder.Entity("API.Entity.GroundVehicle", b =>
                {
                    b.HasOne("API.Entity.Position", "Position")
                        .WithMany("GroundVehicles")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entity.VehicleType", "VehicleType")
                        .WithMany("GroundVehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("API.Entity.Order", b =>
                {
                    b.HasOne("API.Entity.Flight", "Flight")
                        .WithMany("Orders")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entity.Position", "Position")
                        .WithMany("Orders")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entity.VehicleType", "VehicleType")
                        .WithMany("Orders")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Position");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("API.Entity.VehicleSchedule", b =>
                {
                    b.HasOne("API.Entity.GroundVehicle", "GroundVehicle")
                        .WithMany("VehicleSchedules")
                        .HasForeignKey("GroundVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entity.Order", "Order")
                        .WithMany("VehicleSchedules")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroundVehicle");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("API.Entity.AircraftType", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("API.Entity.Flight", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("API.Entity.GroundVehicle", b =>
                {
                    b.Navigation("VehicleSchedules");
                });

            modelBuilder.Entity("API.Entity.Order", b =>
                {
                    b.Navigation("VehicleSchedules");
                });

            modelBuilder.Entity("API.Entity.Position", b =>
                {
                    b.Navigation("GroundVehicles");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("API.Entity.VehicleType", b =>
                {
                    b.Navigation("GroundVehicles");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
